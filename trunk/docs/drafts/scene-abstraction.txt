Create a new scene organisation that follows some rules:
- Be extendable from outside AnKi
- Has a simple interface and correct containers
- Be able to fast cast and fast check type (llvm isa<>)

Every scene node has a few properties that are actually interfaces. This interfaces are:

+========================+==================+===================================+=====================+
| Class name             | Base class       | Interface                         | Used                |
+========================+==================+===================================+=====================+
| BaseRenderable         | -                | - getVao(level, type)             | -                   |
|                        |                  | - getVertIdsNum(level, type)      |                     |
|                        |                  | - getWorldTransform(level, type)  |                     |
+------------------------+------------------+-----------------------------------+---------------------+
| Renderable             | BaseRenderable   | - getMaterial                     | PatchNode           |
|                        |                  | - getMaterialRuntime (Mutable)    |                     |
|                        |                  | - getMaterialRuntime (Const)      |                     |
|                        |                  | - renderInMs (its not virtual)    |                     |
+------------------------+------------------+-----------------------------------+---------------------+
| DebugRenderable        | BaseRenderable   | -                                 | Camera, Light       |
+------------------------+------------------+-----------------------------------+---------------------+
| IsRenderable           | BaseRenderable   | getShaderProgram                  | Light               |
+------------------------+------------------+-----------------------------------+---------------------+
| VisiblesContainable    | -                | - getVisiblesInfo                 | Camera, Light       |
|                        |                  | - testFrustum(VisibleCheckable)   |                     |
+------------------------+------------------+-----------------------------------+---------------------+
| VisibleCheckable       | -                | getCollisionShape                 | Camera, Light,      |
|                        |                  |                                   | ModelNode, SkinNode,|
|                        |                  |                                   | PatchNode           |
+------------------------+------------------+-----------------------------------+---------------------+
| RenderablesContainable | -                | - getRenderables                  | ModelNode, SkinNode |
|                        |                  | - nodesInheritCollisionShape      |                     |
+------------------------+------------------+-----------------------------------+---------------------+

Rendering passes:
	- Level n
		- Color
		- Depth
		- DepthParaboloid	
	- Debug


Other classes:
	

**BaseRenderableInfo**: Contains a class with public interface of:

	- 

**VisiblesInfo**: Contains the lists of:

	- Renderables
		- renderables in MS
		- renderables in BS
	- IsRenderables
		- point lights
		- spot lights
		
==================
Visibility testing
==================

::

	function test(VisiblesContainable obj)
		for node in nodes
			set node not visible
		endfor
		
		for node in nodes
			if node is RenderablesContainable
				if node ouside frustum 
					break
				endif
			
				if node is nodesInheritCollisionShape
					for subnode in node's renderables
						set subnode visible
					end for
				else
					for subnode in node's renderables
					
				endif
			
				if node inside frustum of obj
					cam push back
				endif
			endif
		endfor
	endfunction

=========
Rendering
=========

::
	function render(VisiblesContainable obj, PassType pt)	
		for renderable obj's renderables
			level = calc from distance of obj and renderable
		
			setupShaderProgram for obj in pt and level
			render using vao of level
		endfor
	endfunction

========
Problems
========

- All properties should contain the world transform










